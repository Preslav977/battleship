/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Controller/Gameboard.js":
/*!*************************************!*\
  !*** ./src/Controller/Gameboard.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   battleShipBoard: () => (/* binding */ battleShipBoard)
/* harmony export */ });
/* harmony import */ var _Model_Ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Model/Ship */ "./src/Model/Ship.js");

let carrier = _Model_Ship__WEBPACK_IMPORTED_MODULE_0__.battleShipLogic.Ship("carrier", 5, 0, false, false);
let battleShip = _Model_Ship__WEBPACK_IMPORTED_MODULE_0__.battleShipLogic.Ship("battleShip", 4, 0, false, false);
let destroyer = _Model_Ship__WEBPACK_IMPORTED_MODULE_0__.battleShipLogic.Ship("destroyer", 3, 0, false, false);
let subMarine = _Model_Ship__WEBPACK_IMPORTED_MODULE_0__.battleShipLogic.Ship("subMarine", 3, 0, false, false);
let patrolBoat = _Model_Ship__WEBPACK_IMPORTED_MODULE_0__.battleShipLogic.Ship("patrolBoat", 2, 0, false, false);
const battleShipBoard = (() => {
  const gameBoard = () => {
    const cols = 8;
    const rows = 8;
    const board = [];
    for (let i = 0; i < cols; i += 1) {
      board[i] = [];
      for (let j = 0; j < rows; j += 1) {
        board[i][j] = "";
      }
    }
    const placeShip = (col, row, ship, direction) => {
      for (let i = 0; i < ship.length; i += 1) {
        if (ship.name === "carrier" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          // ship.isPlaced = true;
          carrier = ship;
        } else if (ship.name === "battleShip" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          battleShip = ship;
        } else if (ship.name === "destroyer" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          destroyer = ship;
        } else if (ship.name === "subMarine" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          subMarine = ship;
        } else if (ship.name === "patrolBoat" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          patrolBoat = ship;
        } else if (ship.name === "carrier" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          carrier = ship;
        } else if (ship.name === "battleShip" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          battleShip = ship;
        } else if (ship.name === "destroyer" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          destroyer = ship;
        } else if (ship.name === "subMarine" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          subMarine = ship;
        } else if (ship.name === "patrolBoat" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          patrolBoat = ship;
        } else {
          return "Invalid ship placement";
        }
      }
      return board[col][row];
    };
    const placeShipComputer = ship => {
      const col = Math.floor(Math.random() * 8);
      const row = Math.floor(Math.random() * 8);
      const shipDirections = ["vertical", "horizontal"];
      const getRandomDirections = Math.floor(Math.random() * shipDirections.length);
      const direction = shipDirections[getRandomDirections];
      for (let i = 0; i < ship.length; i += 1) {
        if (ship.name === "carrier" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          carrier = ship;
        } else if (ship.name === "battleShip" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          battleShip = ship;
        } else if (ship.name === "destroyer" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          destroyer = ship;
        } else if (ship.name === "subMarine" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          subMarine = ship;
        } else if (ship.name === "patrolBoat" && board[col + i][row] === "" && direction === "vertical") {
          board[col + i][row] = ship;
          patrolBoat = ship;
        } else if (ship.name === "carrier" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          carrier = ship;
        } else if (ship.name === "battleShip" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          battleShip = ship;
        } else if (ship.name === "destroyer" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          destroyer = ship;
        } else if (ship.name === "subMarine" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          subMarine = ship;
        } else if (ship.name === "patrolBoat" && board[col][row + i] === "" && direction === "horizontal") {
          board[col][row + i] = ship;
          patrolBoat = ship;
        } else {
          return "Invalid ship placement";
        }
      }
      return board[col][row];
    };
    const printBoard = () => {
      board.forEach(cell => {
        console.log(cell);
      });
    };
    const receiveAttack = (col, row) => {
      const getAllShips = board[col][row];
      if (board[col][row] === "") {
        board[col][row] = "M";
        return "Miss";
      }
      if (board[col][row] === getAllShips && board[col][row] !== "H" && board[col][row] === getAllShips && board[col][row] !== "M") {
        board[col][row] = "H";
        return getAllShips.hit();
      }
      return "You cant hit the same spot";
    };
    const missedShipAttacks = () => {
      const getBoardCopy = [...board];
      const filteredMissedAttacks = [];
      for (let i = 0; i < getBoardCopy.length; i += 1) {
        const retrieveMissedAttacks = getBoardCopy[i].filter(attack => attack === "M");
        if (retrieveMissedAttacks.length !== 0) {
          filteredMissedAttacks.push(retrieveMissedAttacks);
        }
      }
      return filteredMissedAttacks;
    };
    const areAllShipsSunk = () => {
      if (carrier.isSunk() === true && battleShip.isSunk() === true && destroyer.isSunk() === true && subMarine.isSunk() === true && patrolBoat.isSunk() === true) {
        return true;
      }
      return false;
    };
    return {
      printBoard,
      placeShip,
      placeShipComputer,
      receiveAttack,
      missedShipAttacks,
      areAllShipsSunk
    };
  };
  return {
    gameBoard
  };
})();


/***/ }),

/***/ "./src/Model/Ship.js":
/*!***************************!*\
  !*** ./src/Model/Ship.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   battleShipLogic: () => (/* binding */ battleShipLogic)
/* harmony export */ });
const randomUUID = function b(a) {
  return a ?
  // eslint-disable-next-line no-bitwise
  (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);
};
const battleShipLogic = (() => {
  const Ship = function (name, length, numberOfHits, isShipSunk, isPlaced) {
    let id = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : randomUUID();
    const getShipHits = () => numberOfHits;
    const getIsPlaced = () => isPlaced;
    const hit = () => {
      const shipTakingHit = numberOfHits++;
      if (shipTakingHit >= length) {
        return "The ship, cannot be hit anymore!";
      }
      console.log(`Ship ${name} got hit`);
      return {
        numberOfHits
      };
    };
    const isSunk = () => {
      if (name === "carrier" && length === 5 && numberOfHits === 5) {
        console.log("Carrier got sunk");
        return true;
      }
      if (name === "battleShip" && length === 4 && numberOfHits === 4) {
        console.log("Battleship got sunk");
        return true;
      }
      if (name === "destroyer" && length === 3 && numberOfHits === 3) {
        console.log("Destroyer got sunk");
        return true;
      }
      if (name === "subMarine" && length === 3 && numberOfHits === 3) {
        console.log("Submarine got sunk");
        return true;
      }
      if (name === "patrolBoat" && length === 2 && numberOfHits === 2) {
        console.log("Patrol boat got sunk");
        return true;
      }
      return false;
    };
    return {
      name,
      length,
      getShipHits,
      isShipSunk,
      getIsPlaced,
      isPlaced,
      id,
      hit,
      isSunk
    };
  };
  return {
    Ship
  };
})();


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Model_Ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Model/Ship */ "./src/Model/Ship.js");
/* harmony import */ var _Controller_Gameboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Controller/Gameboard */ "./src/Controller/Gameboard.js");


const carrier = _Model_Ship__WEBPACK_IMPORTED_MODULE_0__.battleShipLogic.Ship("carrier", 5, 0, false, false);
const playersBoard = _Controller_Gameboard__WEBPACK_IMPORTED_MODULE_1__.battleShipBoard.gameBoard();
console.log(playersBoard.placeShip(0, 0, carrier, "vertical"));
playersBoard.printBoard();
console.log(carrier.getIsPlaced());
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7Ozs7Ozs7OztBQ04rQztBQUVVO0FBRXpELE1BQU1ELE9BQU8sR0FBR0Qsd0RBQWUsQ0FBQ0UsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7QUFFbkUsTUFBTXdELFlBQVksR0FBR25ELGtFQUFlLENBQUNDLFNBQVMsQ0FBQyxDQUFDO0FBRWhEc0IsT0FBTyxDQUFDQyxHQUFHLENBQUMyQixZQUFZLENBQUM1QyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRWIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTlEeUQsWUFBWSxDQUFDL0IsVUFBVSxDQUFDLENBQUM7QUFFekJHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDOUIsT0FBTyxDQUFDdUQsV0FBVyxDQUFDLENBQUMsQ0FBQyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVtcGxhdGUtcmVwb3NpdG9yeS8uL3NyYy9Db250cm9sbGVyL0dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS1yZXBvc2l0b3J5Ly4vc3JjL01vZGVsL1NoaXAuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtcmVwb3NpdG9yeS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZW1wbGF0ZS1yZXBvc2l0b3J5L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS1yZXBvc2l0b3J5L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtcmVwb3NpdG9yeS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3RlbXBsYXRlLXJlcG9zaXRvcnkvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmF0dGxlU2hpcExvZ2ljIH0gZnJvbSBcIi4uL01vZGVsL1NoaXBcIjtcblxubGV0IGNhcnJpZXIgPSBiYXR0bGVTaGlwTG9naWMuU2hpcChcImNhcnJpZXJcIiwgNSwgMCwgZmFsc2UsIGZhbHNlKTtcblxubGV0IGJhdHRsZVNoaXAgPSBiYXR0bGVTaGlwTG9naWMuU2hpcChcImJhdHRsZVNoaXBcIiwgNCwgMCwgZmFsc2UsIGZhbHNlKTtcblxubGV0IGRlc3Ryb3llciA9IGJhdHRsZVNoaXBMb2dpYy5TaGlwKFwiZGVzdHJveWVyXCIsIDMsIDAsIGZhbHNlLCBmYWxzZSk7XG5cbmxldCBzdWJNYXJpbmUgPSBiYXR0bGVTaGlwTG9naWMuU2hpcChcInN1Yk1hcmluZVwiLCAzLCAwLCBmYWxzZSwgZmFsc2UpO1xuXG5sZXQgcGF0cm9sQm9hdCA9IGJhdHRsZVNoaXBMb2dpYy5TaGlwKFwicGF0cm9sQm9hdFwiLCAyLCAwLCBmYWxzZSwgZmFsc2UpO1xuXG5jb25zdCBiYXR0bGVTaGlwQm9hcmQgPSAoKCkgPT4ge1xuICBjb25zdCBnYW1lQm9hcmQgPSAoKSA9PiB7XG4gICAgY29uc3QgY29scyA9IDg7XG4gICAgY29uc3Qgcm93cyA9IDg7XG4gICAgY29uc3QgYm9hcmQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sczsgaSArPSAxKSB7XG4gICAgICBib2FyZFtpXSA9IFtdO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByb3dzOyBqICs9IDEpIHtcbiAgICAgICAgYm9hcmRbaV1bal0gPSBcIlwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChjb2wsIHJvdywgc2hpcCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNoaXAubmFtZSA9PT0gXCJjYXJyaWVyXCIgJiZcbiAgICAgICAgICBib2FyZFtjb2wgKyBpXVtyb3ddID09PSBcIlwiICYmXG4gICAgICAgICAgZGlyZWN0aW9uID09PSBcInZlcnRpY2FsXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgYm9hcmRbY29sICsgaV1bcm93XSA9IHNoaXA7XG4gICAgICAgICAgLy8gc2hpcC5pc1BsYWNlZCA9IHRydWU7XG4gICAgICAgICAgY2FycmllciA9IHNoaXA7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2hpcC5uYW1lID09PSBcImJhdHRsZVNoaXBcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbCArIGldW3Jvd10gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwidmVydGljYWxcIlxuICAgICAgICApIHtcbiAgICAgICAgICBib2FyZFtjb2wgKyBpXVtyb3ddID0gc2hpcDtcblxuICAgICAgICAgIGJhdHRsZVNoaXAgPSBzaGlwO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNoaXAubmFtZSA9PT0gXCJkZXN0cm95ZXJcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbCArIGldW3Jvd10gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwidmVydGljYWxcIlxuICAgICAgICApIHtcbiAgICAgICAgICBib2FyZFtjb2wgKyBpXVtyb3ddID0gc2hpcDtcblxuICAgICAgICAgIGRlc3Ryb3llciA9IHNoaXA7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2hpcC5uYW1lID09PSBcInN1Yk1hcmluZVwiICYmXG4gICAgICAgICAgYm9hcmRbY29sICsgaV1bcm93XSA9PT0gXCJcIiAmJlxuICAgICAgICAgIGRpcmVjdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbCArIGldW3Jvd10gPSBzaGlwO1xuXG4gICAgICAgICAgc3ViTWFyaW5lID0gc2hpcDtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBzaGlwLm5hbWUgPT09IFwicGF0cm9sQm9hdFwiICYmXG4gICAgICAgICAgYm9hcmRbY29sICsgaV1bcm93XSA9PT0gXCJcIiAmJlxuICAgICAgICAgIGRpcmVjdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbCArIGldW3Jvd10gPSBzaGlwO1xuXG4gICAgICAgICAgcGF0cm9sQm9hdCA9IHNoaXA7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2hpcC5uYW1lID09PSBcImNhcnJpZXJcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPSBzaGlwO1xuXG4gICAgICAgICAgY2FycmllciA9IHNoaXA7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2hpcC5uYW1lID09PSBcImJhdHRsZVNoaXBcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPSBzaGlwO1xuXG4gICAgICAgICAgYmF0dGxlU2hpcCA9IHNoaXA7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2hpcC5uYW1lID09PSBcImRlc3Ryb3llclwiICYmXG4gICAgICAgICAgYm9hcmRbY29sXVtyb3cgKyBpXSA9PT0gXCJcIiAmJlxuICAgICAgICAgIGRpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgYm9hcmRbY29sXVtyb3cgKyBpXSA9IHNoaXA7XG5cbiAgICAgICAgICBkZXN0cm95ZXIgPSBzaGlwO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNoaXAubmFtZSA9PT0gXCJzdWJNYXJpbmVcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPSBzaGlwO1xuXG4gICAgICAgICAgc3ViTWFyaW5lID0gc2hpcDtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBzaGlwLm5hbWUgPT09IFwicGF0cm9sQm9hdFwiICYmXG4gICAgICAgICAgYm9hcmRbY29sXVtyb3cgKyBpXSA9PT0gXCJcIiAmJlxuICAgICAgICAgIGRpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgYm9hcmRbY29sXVtyb3cgKyBpXSA9IHNoaXA7XG5cbiAgICAgICAgICBwYXRyb2xCb2F0ID0gc2hpcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJJbnZhbGlkIHNoaXAgcGxhY2VtZW50XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBib2FyZFtjb2xdW3Jvd107XG4gICAgfTtcblxuICAgIGNvbnN0IHBsYWNlU2hpcENvbXB1dGVyID0gKHNoaXApID0+IHtcbiAgICAgIGNvbnN0IGNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDgpO1xuICAgICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOCk7XG4gICAgICBjb25zdCBzaGlwRGlyZWN0aW9ucyA9IFtcInZlcnRpY2FsXCIsIFwiaG9yaXpvbnRhbFwiXTtcbiAgICAgIGNvbnN0IGdldFJhbmRvbURpcmVjdGlvbnMgPSBNYXRoLmZsb29yKFxuICAgICAgICBNYXRoLnJhbmRvbSgpICogc2hpcERpcmVjdGlvbnMubGVuZ3RoXG4gICAgICApO1xuICAgICAgY29uc3QgZGlyZWN0aW9uID0gc2hpcERpcmVjdGlvbnNbZ2V0UmFuZG9tRGlyZWN0aW9uc107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc2hpcC5uYW1lID09PSBcImNhcnJpZXJcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbCArIGldW3Jvd10gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwidmVydGljYWxcIlxuICAgICAgICApIHtcbiAgICAgICAgICBib2FyZFtjb2wgKyBpXVtyb3ddID0gc2hpcDtcbiAgICAgICAgICBjYXJyaWVyID0gc2hpcDtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBzaGlwLm5hbWUgPT09IFwiYmF0dGxlU2hpcFwiICYmXG4gICAgICAgICAgYm9hcmRbY29sICsgaV1bcm93XSA9PT0gXCJcIiAmJlxuICAgICAgICAgIGRpcmVjdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbCArIGldW3Jvd10gPSBzaGlwO1xuICAgICAgICAgIGJhdHRsZVNoaXAgPSBzaGlwO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNoaXAubmFtZSA9PT0gXCJkZXN0cm95ZXJcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbCArIGldW3Jvd10gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwidmVydGljYWxcIlxuICAgICAgICApIHtcbiAgICAgICAgICBib2FyZFtjb2wgKyBpXVtyb3ddID0gc2hpcDtcbiAgICAgICAgICBkZXN0cm95ZXIgPSBzaGlwO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNoaXAubmFtZSA9PT0gXCJzdWJNYXJpbmVcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbCArIGldW3Jvd10gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwidmVydGljYWxcIlxuICAgICAgICApIHtcbiAgICAgICAgICBib2FyZFtjb2wgKyBpXVtyb3ddID0gc2hpcDtcbiAgICAgICAgICBzdWJNYXJpbmUgPSBzaGlwO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNoaXAubmFtZSA9PT0gXCJwYXRyb2xCb2F0XCIgJiZcbiAgICAgICAgICBib2FyZFtjb2wgKyBpXVtyb3ddID09PSBcIlwiICYmXG4gICAgICAgICAgZGlyZWN0aW9uID09PSBcInZlcnRpY2FsXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgYm9hcmRbY29sICsgaV1bcm93XSA9IHNoaXA7XG4gICAgICAgICAgcGF0cm9sQm9hdCA9IHNoaXA7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2hpcC5uYW1lID09PSBcImNhcnJpZXJcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPSBzaGlwO1xuICAgICAgICAgIGNhcnJpZXIgPSBzaGlwO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNoaXAubmFtZSA9PT0gXCJiYXR0bGVTaGlwXCIgJiZcbiAgICAgICAgICBib2FyZFtjb2xdW3JvdyArIGldID09PSBcIlwiICYmXG4gICAgICAgICAgZGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIlxuICAgICAgICApIHtcbiAgICAgICAgICBib2FyZFtjb2xdW3JvdyArIGldID0gc2hpcDtcbiAgICAgICAgICBiYXR0bGVTaGlwID0gc2hpcDtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBzaGlwLm5hbWUgPT09IFwiZGVzdHJveWVyXCIgJiZcbiAgICAgICAgICBib2FyZFtjb2xdW3JvdyArIGldID09PSBcIlwiICYmXG4gICAgICAgICAgZGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIlxuICAgICAgICApIHtcbiAgICAgICAgICBib2FyZFtjb2xdW3JvdyArIGldID0gc2hpcDtcbiAgICAgICAgICBkZXN0cm95ZXIgPSBzaGlwO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNoaXAubmFtZSA9PT0gXCJzdWJNYXJpbmVcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPSBzaGlwO1xuICAgICAgICAgIHN1Yk1hcmluZSA9IHNoaXA7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2hpcC5uYW1lID09PSBcInBhdHJvbEJvYXRcIiAmJlxuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPT09IFwiXCIgJiZcbiAgICAgICAgICBkaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJvYXJkW2NvbF1bcm93ICsgaV0gPSBzaGlwO1xuICAgICAgICAgIHBhdHJvbEJvYXQgPSBzaGlwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIkludmFsaWQgc2hpcCBwbGFjZW1lbnRcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJvYXJkW2NvbF1bcm93XTtcbiAgICB9O1xuXG4gICAgY29uc3QgcHJpbnRCb2FyZCA9ICgpID0+IHtcbiAgICAgIGJvYXJkLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coY2VsbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChjb2wsIHJvdykgPT4ge1xuICAgICAgY29uc3QgZ2V0QWxsU2hpcHMgPSBib2FyZFtjb2xdW3Jvd107XG5cbiAgICAgIGlmIChib2FyZFtjb2xdW3Jvd10gPT09IFwiXCIpIHtcbiAgICAgICAgYm9hcmRbY29sXVtyb3ddID0gXCJNXCI7XG4gICAgICAgIHJldHVybiBcIk1pc3NcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBib2FyZFtjb2xdW3Jvd10gPT09IGdldEFsbFNoaXBzICYmXG4gICAgICAgIGJvYXJkW2NvbF1bcm93XSAhPT0gXCJIXCIgJiZcbiAgICAgICAgYm9hcmRbY29sXVtyb3ddID09PSBnZXRBbGxTaGlwcyAmJlxuICAgICAgICBib2FyZFtjb2xdW3Jvd10gIT09IFwiTVwiXG4gICAgICApIHtcbiAgICAgICAgYm9hcmRbY29sXVtyb3ddID0gXCJIXCI7XG4gICAgICAgIHJldHVybiBnZXRBbGxTaGlwcy5oaXQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIllvdSBjYW50IGhpdCB0aGUgc2FtZSBzcG90XCI7XG4gICAgfTtcblxuICAgIGNvbnN0IG1pc3NlZFNoaXBBdHRhY2tzID0gKCkgPT4ge1xuICAgICAgY29uc3QgZ2V0Qm9hcmRDb3B5ID0gWy4uLmJvYXJkXTtcblxuICAgICAgY29uc3QgZmlsdGVyZWRNaXNzZWRBdHRhY2tzID0gW107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2V0Qm9hcmRDb3B5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHJldHJpZXZlTWlzc2VkQXR0YWNrcyA9IGdldEJvYXJkQ29weVtpXS5maWx0ZXIoXG4gICAgICAgICAgKGF0dGFjaykgPT4gYXR0YWNrID09PSBcIk1cIlxuICAgICAgICApO1xuICAgICAgICBpZiAocmV0cmlldmVNaXNzZWRBdHRhY2tzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIGZpbHRlcmVkTWlzc2VkQXR0YWNrcy5wdXNoKHJldHJpZXZlTWlzc2VkQXR0YWNrcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmaWx0ZXJlZE1pc3NlZEF0dGFja3M7XG4gICAgfTtcblxuICAgIGNvbnN0IGFyZUFsbFNoaXBzU3VuayA9ICgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgY2Fycmllci5pc1N1bmsoKSA9PT0gdHJ1ZSAmJlxuICAgICAgICBiYXR0bGVTaGlwLmlzU3VuaygpID09PSB0cnVlICYmXG4gICAgICAgIGRlc3Ryb3llci5pc1N1bmsoKSA9PT0gdHJ1ZSAmJlxuICAgICAgICBzdWJNYXJpbmUuaXNTdW5rKCkgPT09IHRydWUgJiZcbiAgICAgICAgcGF0cm9sQm9hdC5pc1N1bmsoKSA9PT0gdHJ1ZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJpbnRCb2FyZCxcbiAgICAgIHBsYWNlU2hpcCxcbiAgICAgIHBsYWNlU2hpcENvbXB1dGVyLFxuICAgICAgcmVjZWl2ZUF0dGFjayxcbiAgICAgIG1pc3NlZFNoaXBBdHRhY2tzLFxuICAgICAgYXJlQWxsU2hpcHNTdW5rLFxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBnYW1lQm9hcmQsXG4gIH07XG59KSgpO1xuXG5leHBvcnQgeyBiYXR0bGVTaGlwQm9hcmQgfTtcbiIsImNvbnN0IHJhbmRvbVVVSUQgPSBmdW5jdGlvbiBiKGEpIHtcbiAgcmV0dXJuIGFcbiAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAoYSBeICgoTWF0aC5yYW5kb20oKSAqIDE2KSA+PiAoYSAvIDQpKSkudG9TdHJpbmcoMTYpXG4gICAgOiAoWzFlN10gKyAtMWUzICsgLTRlMyArIC04ZTMgKyAtMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgYik7XG59O1xuXG5jb25zdCBiYXR0bGVTaGlwTG9naWMgPSAoKCkgPT4ge1xuICBjb25zdCBTaGlwID0gKFxuICAgIG5hbWUsXG4gICAgbGVuZ3RoLFxuICAgIG51bWJlck9mSGl0cyxcbiAgICBpc1NoaXBTdW5rLFxuICAgIGlzUGxhY2VkLFxuICAgIGlkID0gcmFuZG9tVVVJRCgpXG4gICkgPT4ge1xuICAgIGNvbnN0IGdldFNoaXBIaXRzID0gKCkgPT4gbnVtYmVyT2ZIaXRzO1xuXG4gICAgY29uc3QgZ2V0SXNQbGFjZWQgPSAoKSA9PiBpc1BsYWNlZDtcblxuICAgIGNvbnN0IGhpdCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHNoaXBUYWtpbmdIaXQgPSBudW1iZXJPZkhpdHMrKztcblxuICAgICAgaWYgKHNoaXBUYWtpbmdIaXQgPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBcIlRoZSBzaGlwLCBjYW5ub3QgYmUgaGl0IGFueW1vcmUhXCI7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhgU2hpcCAke25hbWV9IGdvdCBoaXRgKTtcblxuICAgICAgcmV0dXJuIHsgbnVtYmVyT2ZIaXRzIH07XG4gICAgfTtcblxuICAgIGNvbnN0IGlzU3VuayA9ICgpID0+IHtcbiAgICAgIGlmIChuYW1lID09PSBcImNhcnJpZXJcIiAmJiBsZW5ndGggPT09IDUgJiYgbnVtYmVyT2ZIaXRzID09PSA1KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2FycmllciBnb3Qgc3Vua1wiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSBcImJhdHRsZVNoaXBcIiAmJiBsZW5ndGggPT09IDQgJiYgbnVtYmVyT2ZIaXRzID09PSA0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQmF0dGxlc2hpcCBnb3Qgc3Vua1wiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSBcImRlc3Ryb3llclwiICYmIGxlbmd0aCA9PT0gMyAmJiBudW1iZXJPZkhpdHMgPT09IDMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJEZXN0cm95ZXIgZ290IHN1bmtcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZSA9PT0gXCJzdWJNYXJpbmVcIiAmJiBsZW5ndGggPT09IDMgJiYgbnVtYmVyT2ZIaXRzID09PSAzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3VibWFyaW5lIGdvdCBzdW5rXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09IFwicGF0cm9sQm9hdFwiICYmIGxlbmd0aCA9PT0gMiAmJiBudW1iZXJPZkhpdHMgPT09IDIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJQYXRyb2wgYm9hdCBnb3Qgc3Vua1wiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUsXG4gICAgICBsZW5ndGgsXG4gICAgICBnZXRTaGlwSGl0cyxcbiAgICAgIGlzU2hpcFN1bmssXG4gICAgICBnZXRJc1BsYWNlZCxcbiAgICAgIGlzUGxhY2VkLFxuICAgICAgaWQsXG4gICAgICBoaXQsXG4gICAgICBpc1N1bmssXG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIFNoaXAsXG4gIH07XG59KSgpO1xuXG5leHBvcnQgeyBiYXR0bGVTaGlwTG9naWMgfTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgYmF0dGxlU2hpcExvZ2ljIH0gZnJvbSBcIi4vTW9kZWwvU2hpcFwiO1xuXG5pbXBvcnQgeyBiYXR0bGVTaGlwQm9hcmQgfSBmcm9tIFwiLi9Db250cm9sbGVyL0dhbWVib2FyZFwiO1xuXG5jb25zdCBjYXJyaWVyID0gYmF0dGxlU2hpcExvZ2ljLlNoaXAoXCJjYXJyaWVyXCIsIDUsIDAsIGZhbHNlLCBmYWxzZSk7XG5cbmNvbnN0IHBsYXllcnNCb2FyZCA9IGJhdHRsZVNoaXBCb2FyZC5nYW1lQm9hcmQoKTtcblxuY29uc29sZS5sb2cocGxheWVyc0JvYXJkLnBsYWNlU2hpcCgwLCAwLCBjYXJyaWVyLCBcInZlcnRpY2FsXCIpKTtcblxucGxheWVyc0JvYXJkLnByaW50Qm9hcmQoKTtcblxuY29uc29sZS5sb2coY2Fycmllci5nZXRJc1BsYWNlZCgpKTtcbiJdLCJuYW1lcyI6WyJiYXR0bGVTaGlwTG9naWMiLCJjYXJyaWVyIiwiU2hpcCIsImJhdHRsZVNoaXAiLCJkZXN0cm95ZXIiLCJzdWJNYXJpbmUiLCJwYXRyb2xCb2F0IiwiYmF0dGxlU2hpcEJvYXJkIiwiZ2FtZUJvYXJkIiwiY29scyIsInJvd3MiLCJib2FyZCIsImkiLCJqIiwicGxhY2VTaGlwIiwiY29sIiwicm93Iiwic2hpcCIsImRpcmVjdGlvbiIsImxlbmd0aCIsIm5hbWUiLCJwbGFjZVNoaXBDb21wdXRlciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInNoaXBEaXJlY3Rpb25zIiwiZ2V0UmFuZG9tRGlyZWN0aW9ucyIsInByaW50Qm9hcmQiLCJmb3JFYWNoIiwiY2VsbCIsImNvbnNvbGUiLCJsb2ciLCJyZWNlaXZlQXR0YWNrIiwiZ2V0QWxsU2hpcHMiLCJoaXQiLCJtaXNzZWRTaGlwQXR0YWNrcyIsImdldEJvYXJkQ29weSIsImZpbHRlcmVkTWlzc2VkQXR0YWNrcyIsInJldHJpZXZlTWlzc2VkQXR0YWNrcyIsImZpbHRlciIsImF0dGFjayIsInB1c2giLCJhcmVBbGxTaGlwc1N1bmsiLCJpc1N1bmsiLCJyYW5kb21VVUlEIiwiYiIsImEiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJudW1iZXJPZkhpdHMiLCJpc1NoaXBTdW5rIiwiaXNQbGFjZWQiLCJpZCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImdldFNoaXBIaXRzIiwiZ2V0SXNQbGFjZWQiLCJzaGlwVGFraW5nSGl0IiwicGxheWVyc0JvYXJkIl0sInNvdXJjZVJvb3QiOiIifQ==